#Remove ANOVA column
timecourse_prot <- timecourse_prot[,1:8]
pathview(gene.data  = timecourse_prot_zscore,
cpd.data =  timecourse_metab_zscore,
out.suffix = "glycolysis.zscore",
pathway.id = "spu00010",
species    = 'spu',
#limit = list(gene = 2, cpd = 2), #"provide limit values when putting in color format."
discrete = list(gene = TRUE, cpd = TRUE),
match.data = FALSE)
######Z-score both datasets {method #1}###########
timecourse_prot_zscore  <- as.data.frame(t(scale(t(timecourse_prot))))
timecourse_metab_zscore  <- as.data.frame(t(scale(t(timecourse_metab))))
#Pathview plots: (by z-score)
pathview(gene.data  = timecourse_prot_zscore,
cpd.data =  timecourse_metab_zscore,
out.suffix = "glycolysis.zscore",
pathway.id = "spu00010",
species    = 'spu',
#limit = list(gene = 2, cpd = 2), #"provide limit values when putting in color format."
discrete = list(gene = TRUE, cpd = TRUE),
match.data = FALSE)
pathview(gene.data  = timecourse_prot_maxscale,
cpd.data =  timecourse_metab_maxscale,
out.suffix = "min.max.3",
pathway.id = "spu00010",
species    = 'spu',
both.dirs = list(gene=FALSE, cpd=TRUE),
limit = list(gene = 1, cpd = 1), #"provide limit values when putting in color format."
discrete = list(gene = T, cpd = F),
match.data = TRUE)
#########By max value {method #2}#########
min_max_scaling <- function(vector){
norm <- (vector - min(vector))/(max(vector) - min(vector))
return(norm)
}
#Test
test1 <- c(0,1,10,5,5,9,12,0.1)
min_max_scaling(test1)
timecourse_prot_maxscale <- as.data.frame(t(apply(timecourse_prot, 1, min_max_scaling)))
timecourse_metab_maxscale <- as.data.frame(t(apply(timecourse_metab, 1, min_max_scaling)))
pathview(gene.data  = timecourse_prot_maxscale,
cpd.data =  timecourse_metab_maxscale,
out.suffix = "min.max.3",
pathway.id = "spu00010",
species    = 'spu',
both.dirs = list(gene=FALSE, cpd=TRUE),
limit = list(gene = 1, cpd = 1), #"provide limit values when putting in color format."
discrete = list(gene = T, cpd = F),
match.data = TRUE)
pathview(gene.data  = timecourse_prot_maxscale,
cpd.data =  timecourse_metab_maxscale,
out.suffix = "min.max.3",
pathway.id = "spu00010",
species    = 'spu',
both.dirs = list(gene=FALSE, cpd=FALSE),
low = list(gene = "green", cpd = "blue"),
mid = list(gene = "gray", cpd = "gray"),
high = list(gene = "red", cpd = "yellow"),
limit = list(gene = 1, cpd = 1), #"provide limit values when putting in color format."
discrete = list(gene = T, cpd = F),
match.data = TRUE)
pathview(gene.data  = timecourse_prot_maxscale,
cpd.data =  timecourse_metab_maxscale,
out.suffix = "min.max.3",
pathway.id = "spu00010",
species    = 'spu',
both.dirs = list(gene=FALSE, cpd=FALSE),
low = list(gene = "green", cpd = "blue"),
mid = list(gene = "gray", cpd = "gray"),
high = list(gene = "red", cpd = "yellow"),
limit = list(gene = 1, cpd = 1), #"provide limit values when putting in color format."
#discrete = list(gene = T, cpd = F),
match.data = TRUE)
pathview(gene.data  = timecourse_prot_zscore,
cpd.data =  timecourse_metab_zscore,
out.suffix = "TCA.zscore",
pathway.id = "spu00020",
species    = 'spu',
#limit = list(gene = 2, cpd = 2), #"provide limit values when putting in color format."
discrete = list(gene = TRUE, cpd = TRUE),
match.data = FALSE)
egg_scaling <- function(vector){
norm <- (vector - vector[1])/(max(vector) - min(vector))
return(norm)
}
#Test
test1 <- c(7,1,10,5,5,9,12,0.1)
egg_scaling(test1)
egg_scaling <- function(vector){
norm <- (vector - vector[1]) #/(max(vector) - min(vector))
return(norm)
}
#Test
test1 <- c(7,1,10,5,5,9,12,0.1)
egg_scaling(test1)
egg_scaling <- function(vector){
norm <- (vector - vector[1])/(max(vector) - min(vector))
return(norm)
}
#Test
test1 <- c(7,1,10,5,5,9,12,0.1)
egg_scaling(test1)
egg_scaling <- function(vector){
norm <- (vector - vector[1])/(max(vector) - min(vector))
return(norm)
}
#Test
test1 <- c(7,1,10,5,5,9,12,0.1)
egg_scaling(test1)
timecourse_prot_eggscale <- as.data.frame(t(apply(timecourse_prot, 1, egg_scaling)))
timecourse_metab_eggscale <- as.data.frame(t(apply(timecourse_metab, 1, egg_scaling)))
View(timecourse_prot_eggscale)
pathview(gene.data  = timecourse_prot_eggscale,
cpd.data =  timecourse_metab_eggscale,
out.suffix = "glycolysis.eggscale",
pathway.id = "spu00010",
species    = 'spu',
#limit = list(gene = 2, cpd = 2), #"provide limit values when putting in color format."
discrete = list(gene = TRUE, cpd = TRUE),
match.data = FALSE)
pathview(gene.data  = timecourse_prot_eggscale,
cpd.data =  timecourse_metab_eggscale,
out.suffix = "tca.eggscale",
pathway.id = "spu00020",
species    = 'spu',
#limit = list(gene = 2, cpd = 2), #"provide limit values when putting in color format."
discrete = list(gene = TRUE, cpd = TRUE),
match.data = FALSE)
View(timecourse_metab_eggscale)
pathview(gene.data  = timecourse_prot_eggscale,
cpd.data =  timecourse_metab_eggscale,
out.suffix = "fa.eggscale",
pathway.id = "spu00061",
species    = 'spu',
#limit = list(gene = 2, cpd = 2), #"provide limit values when putting in color format."
discrete = list(gene = TRUE, cpd = TRUE),
match.data = FALSE)
library(shiny); runApp('C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/App/TIMECOURSE/pathway_maps_timecourse.R')
pathview(gene.data  = timecourse_prot_eggscale,
cpd.data =  timecourse_metab_eggscale,
out.suffix = "oxphos.eggscale",
pathway.id = "spu00190",
species    = 'spu',
#limit = list(gene = 2, cpd = 2), #"provide limit values when putting in color format."
discrete = list(gene = TRUE, cpd = TRUE),
match.data = FALSE)
library(pathview)
#Initialize datasets from "global_metab_maps.R" and "timecourse_all.R"
timecourse_metab <- read.csv(file = "C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/Manuscript R files/Data/timecourse_metabolomics_global.csv", row.names = 1)
timecourse_prot <- read.csv(file = "C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/Manuscript R files/Data/timecourse_proteomics_global.csv", row.names = 1)
#Remove ANOVA column
timecourse_prot <- timecourse_prot[,1:8]
######Z-score both datasets {method #1}###########
timecourse_prot_zscore  <- as.data.frame(t(scale(t(timecourse_prot))))
timecourse_metab_zscore  <- as.data.frame(t(scale(t(timecourse_metab))))
#Test
test1 <- c(0,1,10,5,5,9,12,0.1)
min_max_scaling(test1)
timecourse_prot_maxscale <- as.data.frame(t(apply(timecourse_prot, 1, min_max_scaling)))
timecourse_metab_maxscale <- as.data.frame(t(apply(timecourse_metab, 1, min_max_scaling)))
min_max_scaling <- function(vector){
norm <- (vector - min(vector))/(max(vector) - min(vector))
return(norm)
}
#Test
test1 <- c(0,1,10,5,5,9,12,0.1)
min_max_scaling(test1)
timecourse_prot_maxscale <- as.data.frame(t(apply(timecourse_prot, 1, min_max_scaling)))
timecourse_metab_maxscale <- as.data.frame(t(apply(timecourse_metab, 1, min_max_scaling)))
egg_scaling <- function(vector){
norm <- (vector - vector[1])/(max(vector) - min(vector))
return(norm)
}
#Test
test1 <- c(7,1,10,5,5,9,12,0.1)
egg_scaling(test1)
timecourse_prot_eggscale <- as.data.frame(t(apply(timecourse_prot, 1, egg_scaling)))
timecourse_metab_eggscale <- as.data.frame(t(apply(timecourse_metab, 1, egg_scaling)))
pathview(gene.data  = timecourse_prot_eggscale,
cpd.data =  timecourse_metab_eggscale,
out.suffix = "oxphos.eggscale",
pathway.id = "spu00190",
species    = 'spu',
#limit = list(gene = 2, cpd = 2), #"provide limit values when putting in color format."
discrete = list(gene = TRUE, cpd = TRUE),
match.data = FALSE)
pathview(gene.data  = timecourse_prot_zscore,
cpd.data =  timecourse_metab_zscore,
out.suffix = "OXPHOS.zscore",
pathway.id = "spu00190",
species    = 'spu',
#limit = list(gene = 2, cpd = 2), #"provide limit values when putting in color format."
discrete = list(gene = TRUE, cpd = TRUE),
match.data = FALSE)
runApp('C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/App/TIMECOURSE/pathway_maps_timecourse.R')
library(pathview)
#Initialize datasets from "global_metab_maps.R" and "timecourse_all.R"
timecourse_metab <- read.csv(file = "C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/Manuscript R files/Data/timecourse_metabolomics_global.csv", row.names = 1)
timecourse_prot <- read.csv(file = "C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/Manuscript R files/Data/timecourse_proteomics_global.csv", row.names = 1)
#Remove ANOVA column
timecourse_prot <- timecourse_prot[,1:8]
######Z-score both datasets {method #1}###########
timecourse_prot_zscore  <- as.data.frame(t(scale(t(timecourse_prot))))
timecourse_metab_zscore  <- as.data.frame(t(scale(t(timecourse_metab))))
#########By max value {method #2}#########
min_max_scaling <- function(vector){
norm <- (vector - min(vector))/(max(vector) - min(vector))
return(norm)
}
#Test
test1 <- c(0,1,10,5,5,9,12,0.1)
min_max_scaling(test1)
timecourse_prot_maxscale <- as.data.frame(t(apply(timecourse_prot, 1, min_max_scaling)))
timecourse_metab_maxscale <- as.data.frame(t(apply(timecourse_metab, 1, min_max_scaling)))
#########Normalize by Egg {method #3}#########
egg_scaling <- function(vector){
norm <- (vector - vector[1])/(max(vector) - min(vector))
return(norm)
}
#Test
test1 <- c(7,1,10,5,5,9,12,0.1)
egg_scaling(test1)
timecourse_prot_eggscale <- as.data.frame(t(apply(timecourse_prot, 1, egg_scaling)))
timecourse_metab_eggscale <- as.data.frame(t(apply(timecourse_metab, 1, egg_scaling)))
pathview(gene.data  = timecourse_prot_eggscale,
cpd.data =  timecourse_metab_eggscale,
out.suffix = "FAbio.eggscale",
pathway.id = "spu00061",
species    = 'spu',
#limit = list(gene = 2, cpd = 2), #"provide limit values when putting in color format."
discrete = list(gene = TRUE, cpd = TRUE),
match.data = FALSE)
pathview(gene.data  = timecourse_prot_zscore,
cpd.data =  timecourse_metab_zscore,
out.suffix = "FAbio.zscore",
pathway.id = "spu00061",
species    = 'spu',
#limit = list(gene = 2, cpd = 2), #"provide limit values when putting in color format."
discrete = list(gene = TRUE, cpd = TRUE),
match.data = FALSE)
library(pathview)
#Initialize datasets from "global_metab_maps.R" and "timecourse_all.R"
timecourse_metab <- read.csv(file = "C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/Manuscript R files/Data/timecourse_metabolomics_global.csv", row.names = 1)
timecourse_prot <- read.csv(file = "C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/Manuscript R files/Data/timecourse_proteomics_global.csv", row.names = 1)
#Remove ANOVA column
timecourse_prot <- timecourse_prot[,1:8]
egg_scaling <- function(vector){
norm <- (vector - vector[1])/(max(vector) - min(vector))
return(norm)
}
#Test
test1 <- c(7,1,10,5,5,9,12,0.1)
egg_scaling(test1)
timecourse_prot_eggscale <- as.data.frame(t(apply(timecourse_prot, 1, egg_scaling)))
timecourse_metab_eggscale <- as.data.frame(t(apply(timecourse_metab, 1, egg_scaling)))
write.csv(timecourse_prot_eggscale, file = "C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/App/TIMECOURSE/timecourse.prot.eggscale.csv")
write.csv(timecourse_metab_eggscale, file = "C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/App/TIMECOURSE/timecourse.metab.eggscale.csv")
library(shiny); runApp('C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/App/TIMECOURSE/pathway_maps_timecourse.R')
runApp('C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/App/TIMECOURSE/pathway_maps_timecourse.R')
runApp('pathway_maps_timecourse.R')
runApp('C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/App/TIMECOURSE/pathway_maps_timecourse.R')
#deleted: C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer
GSEA_stat <- function(timecourse_full, cond1, cond2, alpha,
ncbitogene= "NCBItoGENEPAGE.txt",
geneidtogenepage ="/Anno/GENEIDtoGENEPAGE.txt",
funct2g = "/Anno/funcanno_t2g.csv",
funct2n = "/Anno/funcanno_t2n.csv",
got2g = "/Anno/GOanno_t2g.csv",
got2n = "/Anno/GOanno_t2n.csv",
keggt2g = "/Anno/KEGGanno_t2g.csv",
keggt2n = "/Anno/KEGGanno_t2n.csv")
{
#GSEA stat works by cond2 - cond1
#cond2 and cond1 must be string lists "character vector"
#LogFC
col <- c("Egg.1", "Egg.2", "Egg.3",
"2cell.1", "2cell.2", "2cell.3",
"16cell.1", "16cell.2", "16cell.3",
"Morula.1", "Morula.2", "Morula.3",
"Blastula.1", "Blastula.2", "Blastula.3",
"Gastrula.1", "Gastrula.2", "Gastrula.3",
"Prism.1", "Prism.2", "Prism.3",
"Pluteus.1",  "Pluteus.2",  "Pluteus.3")
timecourse_full$logFC.cond2.m.cond1 <- apply(timecourse_full[,col], 1, function(x) log2(mean(x[cond2])) - log2(mean(x[cond1])))
#ttest
timecourse_full$ttest.cond2.m.cond1 <- apply(timecourse_full[,col], 1, function(x) {t.test(x[cond2], x[cond1], paired = TRUE)$p.value})
#GSEA
timecourse_full$GSEA.cond2.m.cond1 <- apply( timecourse_full[,c("ttest.cond2.m.cond1", "logFC.cond2.m.cond1")],1,function(x) -log10(x[c("ttest.cond2.m.cond1")])/sign(x[c("logFC.cond2.m.cond1")]))
#Add GSEA to timecourse
timecourse_full_pathway <- subset(timecourse_full, select = c("GSEA.cond2.m.cond1", "Protein.ID"))
#Annotate the data, Conversion of IDs
NCBItoGENEID <- read.delim(file = ncbitogene, header = F)
GENEIDtoGENEPAGE <- read.delim(file = geneidtogenepage, header = F)
NCBItoGENEID <- subset(NCBItoGENEID, select = c("V2","V3"))
GENEIDtoGENEPAGE <- subset(GENEIDtoGENEPAGE, select = c("V1","V3"))
timecourse_full$Protein.ID<- gsub("\\..*","",timecourse_full$Protein.ID)
colnames(NCBItoGENEID) <- c("Protein.ID","GENEID")
colnames(GENEIDtoGENEPAGE) <- c("GENEPAGE","GENEID")
timecourse_full <- merge(timecourse_full, NCBItoGENEID, by = "Protein.ID" )
timecourse_full <- merge(timecourse_full, GENEIDtoGENEPAGE, by = "GENEID")
timecourse_full <- timecourse_full[!duplicated(timecourse_full$GENEPAGE), ]
#More Input files
###Pathway input files###
EC <- keggList("enzyme")
EC <- as.data.frame(EC)
EC$EC <- gsub("\\;.*","",EC$EC)
EC$ID <- rownames(EC)
rownames(EC) <- 1:nrow(EC)
EC <- EC[,c("ID","EC")]
EC$ID <- gsub("ec:","EC:",EC$ID)
colnames(EC) <- c("GOID","TERM")
#GSEA uses all of the genes not just DE genes
FUNCt2g <- read.csv(file = funct2g, row.names = 1)
FUNCt2n <- read.csv(file = funct2n, row.names = 1)
GOt2g <- read.csv(file = got2g, row.names = 1)
GOt2n <- read.csv(file = got2n, row.names = 1)
KEGGt2g <- read.csv(file = keggt2g, row.names = 1)
KEGGt2n <- read.csv(file = keggt2n, row.names = 1)
KEGGt2n$PathwayID <- gsub("path:","",KEGGt2n$PathwayID)
GOt2n <- rbind(GOt2n, EC)
#Convert FUNC list to general FUNC
FUNCt2n <- unique(FUNCt2n)
FUNCver2_t2g <- merge(FUNCt2g, FUNCt2n, by = "Class.L3")
FUNCver2_t2g <- FUNCver2_t2g[,c("Class.L1","V1")]
#make GSEA genelists
cond2.m.cond1 <- timecourse_full$GSEA.cond2.m.cond1
names(cond2.m.cond1) <- timecourse_full$GENEPAGE
cond2.m.cond1[cond2.m.cond1 == Inf] <- 0
cond2.m.cond1 <- sort(cond2.m.cond1, decreasing = TRUE)
gsea.KEGG = GSEA(cond2.m.cond1, pvalueCutoff = alpha, TERM2GENE = KEGGt2g, TERM2NAME = KEGGt2n, verbose = FALSE)
gsea.FUNC = GSEA(cond2.m.cond1, pvalueCutoff = alpha,  TERM2GENE = FUNCt2g, verbose=FALSE)
gsea.FUNCver2 = GSEA(cond2.m.cond1, pvalueCutoff = alpha,  TERM2GENE = FUNCver2_t2g, verbose=FALSE)
gsea.GO = GSEA(cond2.m.cond1, pvalueCutoff = alpha,  TERM2GENE = GOt2g, TERM2NAME = GOt2n, verbose=FALSE)
gsea.ALL = list(gsea.KEGG, gsea.FUNC, gsea.FUNCver2, gsea.GO)
return(gsea.ALL)
}
runApp('C:/Users/shaks/OneDrive/Documents/R/Proteomics Summer/App/TIMECOURSE/pathway_maps_timecourse.R')
bioc <- local({
env <- new.env()
on.exit(rm(env))
evalq(source("http://bioconductor.org/biocLite.R", local = TRUE), env)
biocinstallRepos()
})
library(BiocManager)
options(repos = BiocManager::repositories())
cit.list <- c('base', names(sessionInfo()$otherPkgs))
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
##https://stackoverflow.com/questions/15688758/r-stats-citation-for-a-scientific-paper
citations <- function(includeURL = TRUE, includeRStudio = TRUE) {
if(includeRStudio == TRUE) {
ref.rstudio <- RStudio.Version()$citation
if(includeURL == FALSE) {
ref.rstudio$url <- NULL;
}
print(ref.rstudio, style = 'text')
cat('\n')
}
cit.list <- c('base', names(sessionInfo()$otherPkgs))
for(i in 1:length(cit.list)) {
ref <- citation(cit.list[i])
if(includeURL == FALSE) {
ref$url <- NULL;
}
print(ref, style = 'text')
cat('\n')
}
citations()
#Timecourse
library(matrixStats)
#Timecourse
library(matrixStats)
library(ggplot2)
library(reshape2)
library(clusterProfiler)
library(enrichplot)
library(ggplot2)
library(ggupset)
library(KEGGREST)
library(ggrepel)
library(Mfuzz)
library(stringr)
#BiocManager::install("marray")
library(marray)
#for PCA plotting
library(ggforce)
library(scales)
#heatmap creation
library(ComplexHeatmap)
##https://stackoverflow.com/questions/15688758/r-stats-citation-for-a-scientific-paper
citations <- function(includeURL = TRUE, includeRStudio = TRUE) {
if(includeRStudio == TRUE) {
ref.rstudio <- RStudio.Version()$citation
if(includeURL == FALSE) {
ref.rstudio$url <- NULL;
}
print(ref.rstudio, style = 'text')
cat('\n')
}
cit.list <- c('base', names(sessionInfo()$otherPkgs))
for(i in 1:length(cit.list)) {
ref <- citation(cit.list[i])
if(includeURL == FALSE) {
ref$url <- NULL;
}
print(ref, style = 'text')
cat('\n')
}
citations()
#Timecourse
library(matrixStats)
library(ggplot2)
library(reshape2)
library(clusterProfiler)
library(enrichplot)
library(ggplot2)
library(ggupset)
library(KEGGREST)
library(ggrepel)
library(Mfuzz)
library(stringr)
#BiocManager::install("marray")
library(marray)
#for PCA plotting
library(ggforce)
library(scales)
#heatmap creation
library(ComplexHeatmap)
library(pathview) #visualizationa
##https://stackoverflow.com/questions/15688758/r-stats-citation-for-a-scientific-paper
citations <- function(includeURL = TRUE, includeRStudio = TRUE) {
if(includeRStudio == TRUE) {
ref.rstudio <- RStudio.Version()$citation
if(includeURL == FALSE) {
ref.rstudio$url <- NULL;
}
print(ref.rstudio, style = 'text')
cat('\n')
}
cit.list <- c('base', names(sessionInfo()$otherPkgs))
for(i in 1:length(cit.list)) {
ref <- citation(cit.list[i])
if(includeURL == FALSE) {
ref$url <- NULL;
}
print(ref, style = 'text')
cat('\n')
}
citations()
#Timecourse
library(matrixStats)
library(ggplot2)
library(reshape2)
library(clusterProfiler)
library(enrichplot)
library(ggplot2)
library(ggupset)
library(KEGGREST)
library(ggrepel)
library(Mfuzz)
library(stringr)
#BiocManager::install("marray")
library(marray)
#for PCA plotting
library(ggforce)
library(scales)
#heatmap creation
library(ComplexHeatmap)
library(pathview) #visualizationa
##https://stackoverflow.com/questions/15688758/r-stats-citation-for-a-scientific-paper
citations <- function(includeURL = TRUE, includeRStudio = TRUE) {
if(includeRStudio == TRUE) {
ref.rstudio <- RStudio.Version()$citation
if(includeURL == FALSE) {
ref.rstudio$url <- NULL;
}
print(ref.rstudio, style = 'text')
cat('\n')
}
cit.list <- c('base', names(sessionInfo()$otherPkgs))
for(i in 1:length(cit.list)) {
ref <- citation(cit.list[i])
if(includeURL == FALSE) {
ref$url <- NULL;
}
print(ref, style = 'text')
cat('\n')
}
library(pathview) #visualizationa
##https://stackoverflow.com/questions/15688758/r-stats-citation-for-a-scientific-paper
citations <- function(includeURL = TRUE, includeRStudio = TRUE) {
if(includeRStudio == TRUE) {
ref.rstudio <- RStudio.Version()$citation
if(includeURL == FALSE) {
ref.rstudio$url <- NULL;
}
print(ref.rstudio, style = 'text')
cat('\n')
}
cit.list <- c('base', names(sessionInfo()$otherPkgs))
for(i in 1:length(cit.list)) {
ref <- citation(cit.list[i])
if(includeURL == FALSE) {
ref$url <- NULL;
}
print(ref, style = 'text')
cat('\n')
}
citations()
